## Crie um programa que utilize a API do Jsonplaceholder:
## Permita um menu interativo onde o usu√°rio possa:
## Primeiro, se identificar e, com isso, fazer uma verifica√ß√£o se usu√°rio existe (tenha um dicion√°rio simulando um banco de dados com c√≥digo, e-mail e senha, por exemplo).
## Ap√≥s login, permita a ele: visualizar posts e coment√°rios.
## Visualizar seus pr√≥prios posts.
## Filtrar posts por algum outro usu√°rio.
## Criar um novo post (usar usu√°rio logado).
## Exibir um resumo das intera√ß√µes feitas ao sair do la√ßo (quantos posts e coment√°rios foram visualizados e quantos posts foram criados por ele).

# Importa bibliotecas necess√°rias
import requests

# Simula um banco de dados de usu√°rios
usuarios = {
    "1": {"email": "natan@mail.com", "senha": "admin"},
    "2": {"email": "alfonso@mail.com", "senha": "password"},
}

# Lista para armazenar os posts criados na sess√£o
posts_criados_localmente = []

# Fun√ß√£o para autenticar usu√°rio
def autenticar():
    print("===== Login =====")
    codigo = input("C√≥digo do usu√°rio: ")
    email = input("Email: ")
    senha = input("Senha: ")

    if codigo in usuarios and usuarios[codigo]['email'] == email and usuarios[codigo]['senha'] == senha:
        print("\n‚úÖ Login bem-sucedido!")
        return int(codigo)
    else:
        print("\n‚ùå Usu√°rio ou senha inv√°lidos.")
        return None

# Fun√ß√£o para buscar todos os posts
def visualizar_posts():
    resposta = requests.get("https://jsonplaceholder.typicode.com/posts")
    if resposta.status_code == 200:
        posts = resposta.json()
        for post in posts[:5]:
            print(f"\033[94m\n(Post da API)\033[0m\nPost ID: {post['id']}\nT√≠tulo: {post['title']}\nConte√∫do: {post['body']}")
        return 5
    else:
        print("Erro ao buscar posts.")
        return 0

# Fun√ß√£o para visualizar coment√°rios de um post
def visualizar_comentarios():
    post_id = input("Digite o ID do post para ver os coment√°rios: ")
    resposta = requests.get(f"https://jsonplaceholder.typicode.com/posts/{post_id}/comments")
    if resposta.status_code == 200:
        comentarios = resposta.json()
        for comentario in comentarios:
            print(f"\nAutor: {comentario['email']}\nComent√°rio: {comentario['body']}")
        return len(comentarios)
    else:
        print("Erro ao buscar coment√°rios.")
        return 0

# Fun√ß√£o para visualizar os pr√≥prios posts
def visualizar_meus_posts(user_id):
    total = 0

    for i, post in enumerate(posts_criados_localmente):
        if post['userId'] == user_id:
            print(f"\033[92m\n(Post Local #{i})\033[0m\nT√≠tulo: {post['title']}\nConte√∫do: {post['body']}")
            total += 1

    if total == 0:
        print("\n‚ö†Ô∏è Nenhum post criado por voc√™ nesta sess√£o.")

    return total

# Fun√ß√£o para editar post local
def editar_post(user_id):
    visualizar_meus_posts(user_id)
    try:
        index = int(input("\nDigite o n√∫mero do post que deseja editar: "))
        post = posts_criados_localmente[index]
        if post['userId'] != user_id:
            print("‚ùå Voc√™ s√≥ pode editar seus pr√≥prios posts.")
            return 0
        novo_titulo = input("Novo t√≠tulo: ")
        novo_corpo = input("Novo conte√∫do: ")
        post['title'] = novo_titulo
        post['body'] = novo_corpo
        print("‚úÖ Post editado com sucesso!")
        return 1
    except (IndexError, ValueError):
        print("‚ùå Post n√£o encontrado.")
        return 0

# Fun√ß√£o para deletar post local
def deletar_post(user_id):
    visualizar_meus_posts(user_id)
    try:
        index = int(input("\nDigite o n√∫mero do post que deseja deletar: "))
        post = posts_criados_localmente[index]
        if post['userId'] != user_id:
            print("‚ùå Voc√™ s√≥ pode deletar seus pr√≥prios posts.")
            return 0
        posts_criados_localmente.pop(index)
        print("‚úÖ Post deletado com sucesso!")
        return 1
    except (IndexError, ValueError):
        print("‚ùå Post n√£o encontrado.")
        return 0

# Fun√ß√£o para filtrar posts por outro usu√°rio
def filtrar_posts():
    user_id = input("Digite o ID do usu√°rio para ver os posts: ")
    if user_id not in usuarios:
        print("‚ùå Usu√°rio n√£o encontrado.")
        return 0

    resposta = requests.get(f"https://jsonplaceholder.typicode.com/posts?userId={user_id}")
    if resposta.status_code == 200:
        posts = resposta.json()
        for post in posts:
            print(f"\033[94m\n(Post da API)\033[0m\nPost ID: {post['id']}\nT√≠tulo: {post['title']}\nConte√∫do: {post['body']}")
        return len(posts)
    else:
        print("Erro ao buscar posts do usu√°rio.")
        return 0

# Fun√ß√£o para criar um novo post
def criar_post(user_id):
    titulo = input("Digite o t√≠tulo do post: ")
    corpo = input("Digite o conte√∫do do post: ")
    novo_post = {
        "title": titulo,
        "body": corpo,
        "userId": user_id
    }
    resposta = requests.post("https://jsonplaceholder.typicode.com/posts", json=novo_post)
    if resposta.status_code == 201:
        print("\n‚úÖ Post criado com sucesso!")
        posts_criados_localmente.append(novo_post)
        return 1
    else:
        print("Erro ao criar o post.")
        return 0

# Execu√ß√£o principal do programa (sem usar if __name__ == '__main__')
usuario_logado = None
while usuario_logado is None:
    usuario_logado = autenticar()

interacoes = {
    "posts_visualizados": 0,
    "comentarios_visualizados": 0,
    "meus_posts_visualizados": 0,
    "posts_filtrados": 0,
    "posts_criados": 0,
    "posts_editados": 0,
    "posts_deletados": 0
}

while True:
    print("\n===== MENU =====")
    print("1Ô∏è‚É£  Visualizar posts da API")
    print("2Ô∏è‚É£  Visualizar coment√°rios de um post")
    print("3Ô∏è‚É£  Criar novo post")
    print("4Ô∏è‚É£  Ver meus posts")
    print("5Ô∏è‚É£  Editar um post meu")
    print("6Ô∏è‚É£  Deletar um post meu")
    print("7Ô∏è‚É£  Filtrar posts de outro usu√°rio")
    print("0Ô∏è‚É£  Sair")
    opcao = input("Escolha uma op√ß√£o: ")

    if opcao == "1":
        interacoes['posts_visualizados'] += visualizar_posts()
    elif opcao == "2":
        interacoes['comentarios_visualizados'] += visualizar_comentarios()
    elif opcao == "3":
        interacoes['posts_criados'] += criar_post(usuario_logado)
    elif opcao == "4":
        interacoes['meus_posts_visualizados'] += visualizar_meus_posts(usuario_logado)
    elif opcao == "5":
        interacoes['posts_editados'] += editar_post(usuario_logado)
    elif opcao == "6":
        interacoes['posts_deletados'] += deletar_post(usuario_logado)
    elif opcao == "7":
        interacoes['posts_filtrados'] += filtrar_posts()
    elif opcao == "0":
        print("\nüëã Saindo do programa...")
        break
    else:
        print("Op√ß√£o inv√°lida.")

print("\n===== RESUMO DAS INTERA√á√ïES =====")
print(f"Posts visualizados: {interacoes['posts_visualizados']}")
print(f"Coment√°rios visualizados: {interacoes['comentarios_visualizados']}")
print(f"Posts criados: {interacoes['posts_criados']}")
print(f"Seus posts visualizados: {interacoes['meus_posts_visualizados']}")
print(f"Posts editados: {interacoes['posts_editados']}")
print(f"Posts deletados: {interacoes['posts_deletados']}")
print(f"Posts de outros usu√°rios visualizados: {interacoes['posts_filtrados']}")