#Crie um programa que:
# Crie um menu interativo onde o usu√°rio pode ficar fazendo consultas de not√≠cias
# Pergunte ao usu√°rio um tema de not√≠cia
# Pergunte quantas not√≠cias ele quer buscar sobre o tema, lembre de fazer um limitador
# Busque as N not√≠cias mais recentes sobre o tema usando a API da NewsAPI
# Aprensente as inform√ß√µes de t√≠tulo da not√≠cia , qual a fonte e o nome da pessoa que escreveu, de forma organizada para o usu√°rio
# Armazene o hist√≥rico de temas que o usu√°rio buscou e ao sair do menu, apresente no final quais foram as palavras buscadas e quantas not√≠cias foram buscadas no total
# Fa√ßa o envio pelo commit do Github

# Importa as bibliotecas necess√°rias
import requests  # Para realizar requisi√ß√µes HTTP
import os  # Para acessar vari√°veis de ambiente
import webbrowser  # Para abrir URLs no navegador padr√£o
from dotenv import load_dotenv  # Para carregar vari√°veis de ambiente do arquivo .env

# Carrega as vari√°veis do arquivo .env (incluindo a chave da API)
load_dotenv()
api_key = os.getenv('NEWS_API_KEY')  # Obt√©m a chave da API de dentro das vari√°veis de ambiente

# Verifica se a chave da API foi carregada corretamente
if not api_key:
    raise ValueError('API Key n√£o foi localizada nas vari√°veis de ambiente.')  # Se n√£o encontrar, gera erro

# Define o endpoint da API da NewsAPI
url = "https://newsapi.org/v2/everything"
headers = {'x-api-key': api_key}  # Define os cabe√ßalhos da requisi√ß√£o, incluindo a chave da API


# Fun√ß√£o para buscar not√≠cias com base em um tema, quantidade e idioma
def buscar_noticias(tema, quantidade, idioma):
    params = {
        'q': tema,  # Tema da busca
        'language': idioma,  # Idioma dos resultados
        'pageSize': quantidade,  # Quantidade de not√≠cias a ser retornada
        'sortBy': 'publishedAt'  # Ordena as not√≠cias pela data de publica√ß√£o
    }

    # Realiza a requisi√ß√£o GET √† API da NewsAPI
    resposta = requests.get(url, headers=headers, params=params)

    # Verifica se a requisi√ß√£o foi bem-sucedida (status code 200)
    if resposta.status_code != 200:
        print("Erro ao consultar a API:", resposta.status_code)  # Caso contr√°rio, exibe um erro
        return 0  # Retorna 0 se n√£o houver resultados

    resposta_json = resposta.json()  # Converte a resposta da API para o formato JSON
    artigos = resposta_json.get('articles', [])  # Obt√©m a lista de artigos (not√≠cias)

    # Itera sobre os artigos encontrados e exibe informa√ß√µes detalhadas
    for artigo in artigos:
        print("\n--------------------------")
        print(f"T√≠tulo: {artigo.get('title')}")  # Exibe o t√≠tulo da not√≠cia
        print(f"Fonte: {artigo.get('source', {}).get('name')}")  # Exibe a fonte (site)
        print(f"Autor: {artigo.get('author')}")  # Exibe o autor da not√≠cia (se dispon√≠vel)
        print(f"Abrindo not√≠cia no navegador: {artigo.get('url')}")  # Mostra o link da not√≠cia
        webbrowser.open(artigo.get('url'))  # Abre a not√≠cia no navegador padr√£o

    return len(artigos)  # Retorna a quantidade de not√≠cias encontradas


# Fun√ß√£o principal do menu, onde o usu√°rio interage com o programa
def menu_principal():
    temas_buscados = []  # Lista para armazenar os temas buscados e a quantidade de not√≠cias
    total_noticias = 0  # Contador total de not√≠cias buscadas

    # Dicion√°rio de idiomas suportados pela NewsAPI
    idiomas_disponiveis = {
        'pt': 'Portugu√™s',
        'en': 'Ingl√™s',
        'es': 'Espanhol',
        'de': 'Alem√£o',
        'fr': 'Franc√™s',
        'it': 'Italiano',
        'ru': 'Russo'
    }

    # Loop que mant√©m o menu ativo at√© o usu√°rio escolher sair
    while True:
        # Exibe o menu com √≠cones para cada op√ß√£o
        print("\n=========================")
        print("  üì∞ Consulta de Not√≠cias  ")
        print("=========================")
        print("1Ô∏è‚É£ - Buscar not√≠cias")
        print("2Ô∏è‚É£ - Mostrar hist√≥rico de buscas")
        print("0Ô∏è‚É£ - Sair")
        opcao = input("Escolha uma op√ß√£o (1, 2 ou 0): ").strip()

        # Se o usu√°rio escolher buscar not√≠cias
        if opcao == '1' or opcao == '1Ô∏è‚É£':
            # Exibe as op√ß√µes de idiomas antes de perguntar o tema
            print("\nEscolha o idioma para a busca:")
            for code, language in idiomas_disponiveis.items():
                print(f"{code} - {language}")

            # Solicita o idioma desejado
            while True:
                idioma = input("Digite o c√≥digo do idioma: ").strip().lower()
                if idioma in idiomas_disponiveis:
                    break  # Sai do loop se o idioma for v√°lido
                else:
                    print("‚ö†Ô∏è Idioma inv√°lido. Tente novamente.")

            tema = input("üîç Digite o tema que deseja buscar: ")  # Solicita o tema para busca

            # Loop para garantir que a quantidade de not√≠cias seja v√°lida
            while True:
                try:
                    quantidade = int(input("üìÑ Quantas not√≠cias deseja buscar (1 a 20)? "))  # Solicita a quantidade
                    if 1 <= quantidade <= 20:
                        break  # Sai do loop se a quantidade estiver dentro do intervalo
                    else:
                        print("‚ö†Ô∏è Digite um n√∫mero entre 1 e 20.")
                except ValueError:
                    print("‚ö†Ô∏è Digite um n√∫mero v√°lido.")  # Caso o usu√°rio n√£o digite um n√∫mero

            # Chama a fun√ß√£o que busca as not√≠cias com o tema, a quantidade e o idioma fornecido
            noticias_encontradas = buscar_noticias(tema, quantidade, idioma)
            temas_buscados.append((tema, noticias_encontradas))  # Adiciona o tema e a quantidade de not√≠cias
            total_noticias += noticias_encontradas  # Atualiza o contador total de not√≠cias

        # Se o usu√°rio escolher mostrar o hist√≥rico de buscas
        elif opcao == '2' or opcao == '2Ô∏è‚É£':
            print("\n=== Hist√≥rico de Buscas ===")
            if temas_buscados:  # Verifica se h√° hist√≥rico de buscas
                for tema, qtd in temas_buscados:  # Exibe o hist√≥rico de buscas
                    print(f"Tema: '{tema}' - {qtd} not√≠cia(s) encontrada(s).")
                print(f"\nüìä Total de not√≠cias buscadas: {total_noticias}")  # Exibe o total de not√≠cias buscadas
            else:
                print("üìù Nenhuma busca realizada ainda.")
        
        # Se o usu√°rio escolher sair
        elif opcao == '0' or opcao == '0Ô∏è‚É£':
            print("\nüëã Encerrando o programa...")
            break  # Sai do loop e encerra o programa

        # Caso o usu√°rio digite uma op√ß√£o inv√°lida
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")  # Exibe uma mensagem de erro

# Chama a fun√ß√£o principal para executar o menu
menu_principal()
